<?php

/**
 * @file
 * Module civicrm_event_sync.
 *
 * Enables a full sync between the CivCRM Event
 * entity and a Drupal node type event.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;

/**
 * Sync method names follow the following logic.
 *
 * "eventSync<Origin><Operation><Destination>".
 *
 * Depending on the provided destination the method is located in the class
 * EventSyncCivicrm (destination: CiviCRM) or
 * EventSyncDrupal (destination: Drupal).
 *
 * Examples:
 * event_sync_civicrm_create_drupal is called when an event in civicrm is
 * created and must be synced to drupal and is located in class EventSyncDrupal.
 *
 * event_sync_drupal_delete_civicrm is called when an even in drupal is deleted
 * and must be synced to civicrm and is located in class EventSyncCivicrm.
 */

/**
 * CiviCRM hooks.
 */

/**
 * Main hook_civicrm_post implementation.
 *
 * @param string $op
 *   The operation being performed.
 * @param string $objectName
 *   The name of the entity in CiviCRM.
 * @param string $objectId
 *   The id of the current entity.
 * @param object|array $objectRef
 *   An array containing the entity data.
 */
function civicrm_event_sync_civicrm_post($op, $objectName, $objectId, &$objectRef) {
  // Only allow for events from civicrm.
  if ($objectName === "Event") {
    if (function_exists("civicrm_event_sync_civicrm_post_${op}")) {
      call_user_func("civicrm_event_sync_civicrm_post_${op}", $objectRef);
    }
  }
}

/**
 * Implements hook_civicrm_post() for create operation.
 *
 * @param $objectRef
 *
 * @see civicrm_event_sync_civicrm_post().
 */
function civicrm_event_sync_civicrm_post_create($objectRef) {
  if (_canRunOperationForDestination('create', 'drupal')) {
    drupal_register_shutdown_function('civicrm_event_sync_civicrm_post_create_shutdown', $objectRef);
  }
}

/**
 * CiviCRM event create shutdown function.
 *
 * @param $objectRef
 */
function civicrm_event_sync_civicrm_post_create_shutdown($objectRef) {
  \Drupal::service('civicrm_event_sync.drupal')
    ->create($objectRef);
}

/**
 * Implements hook_civicrm_post() for edit operation.
 *
 * @param $objectRef
 *
 * @see civicrm_event_sync_civicrm_post().
 */
function civicrm_event_sync_civicrm_post_edit($objectRef) {
  if (_canRunOperationForDestination('update', 'drupal')) {
    drupal_register_shutdown_function('civicrm_event_sync_civicrm_post_edit_shutdown', $objectRef);
  }
}

/**
 * CiviCRM event update shutdown function.
 *
 * @param $objectRef
 */
function civicrm_event_sync_civicrm_post_edit_shutdown($objectRef) {
  \Drupal::service('civicrm_event_sync.drupal')
    ->update($objectRef);
}

/**
 * Implements hook_civicrm_post() for delete operation.
 *
 * @param $objectRef
 *
 * @see civicrm_event_sync_civicrm_post().
 */
function civicrm_event_sync_civicrm_post_delete($objectRef) {
  if (_canRunOperationForDestination('delete', 'drupal')) {
    drupal_register_shutdown_function('civicrm_event_sync_civicrm_post_delete_shutdown', $objectRef);
  }
}

/**
 * CiviCRM event delete shutdown function.
 *
 * @param $objectRef
 */
function civicrm_event_sync_civicrm_post_delete_shutdown($objectRef) {
  \Drupal::service('civicrm_event_sync.drupal')
    ->delete($objectRef);
}

/**
 * Drupal hooks.
 */

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function civicrm_event_sync_node_insert($entity) {
  if (_canRunOperationForDestination('create', 'civicrm')) {
    drupal_register_shutdown_function('civicrm_event_sync_node_insert_shutdown', $entity);
  }
}

/**
 * Drupal event create shutdown function.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function civicrm_event_sync_node_insert_shutdown($entity) {
  \Drupal::service('civicrm_event_sync.civicrm')
    ->create($entity);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function civicrm_event_sync_node_update($entity) {
  if (_canRunOperationForDestination('update', 'civicrm')) {
    drupal_register_shutdown_function('civicrm_event_sync_node_update_shutdown', $entity);
  }
}

/**
 * Drupal event udpate shutdown function.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function civicrm_event_sync_node_update_shutdown($entity) {
  \Drupal::service('civicrm_event_sync.civicrm')
    ->update($entity);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function civicrm_event_sync_node_delete($entity) {
  if (_canRunOperationForDestination('delete', 'civicrm')) {
    drupal_register_shutdown_function('civicrm_event_sync_node_delete_shutdown', $entity);
  }
}

/**
 * Drupal event delete shutdown function.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function civicrm_event_sync_node_delete_shutdown($entity) {
  \Drupal::service('civicrm_event_sync.civicrm')
    ->delete($entity);
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function civicrm_event_sync_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === "node_event_edit_form") {
    $node = $form_state->getFormObject()->getEntity();

    $civicrm_event_id = $node->get(\Drupal::config('civicrm_event_sync.settings')
      ->get('field'))->getString();

    if (\Drupal::currentUser()->hasPermission('edit all events')) {
      \Drupal::messenger()
        ->addMessage(t('This Event is linked with civicrm event ID @id. Edit the event <a href="/civicrm/event/manage/settings?reset=1&action=update&id=@id">here</a>.', ['@id' => $civicrm_event_id]));
    }
  }
}

/**
 * Implements hook_civicrm_pageRun().
 *
 * @param $page
 */
function civicrm_event_sync_civicrm_pageRun(&$page) {
  if ($page->getVar('_name') == 'CRM_Event_Page_EventInfo') {

    // Get all the messages (status & errors) and pass them to Drupal.
    $statuses = CRM_Core_Session::singleton()->get('status');
    if (!empty($statuses)) {
      foreach ($statuses as $status) {
        $message = Markup::create($status['text']);
        \Drupal::messenger()
          ->addMessage($message, (_message_types()[$status['type']] ?? 'status'));
      }
    }
    $id = $page->get('id');

    // Get the drupal node for this event and redirect to that node.
    $ids = _getNodesFromCivicrmEventId($id);

    if ($ids) {
      // Always get the first destination id.
      $destid = reset($ids);
      if (!empty($destid)) {
        $url = CRM_Utils_System::url('/node/' . $destid);
        CRM_Utils_System::redirect($url);
      }
    }
    else {
      // Redirect to the civicrm backend page if no node exists yet.
      CRM_Core_Session::setStatus('No Drupal node exists yet, so sending back to the edit form.');
      CRM_Utils_System::redirect("/civicrm/event/manage/location?action=update&reset=1&id={$id}");
    }

  }
}

/**
 * Helper function to map the civicrm status types to Drupal message types.
 * Keys are the CiviCRM types & values are the Drupal types.
 *
 * @return array
 */
function _message_types() {
  return [
    'info' => 'status',
    'success' => 'status',
    'alert' => 'warning',
    'error' => 'error',
  ];
}

/**
 * Helper function to get the drupal node from a civicrm event.
 *
 * @param int $id
 *   The ID of the event in CiviCRM.
 * @return array
 */
function _getNodesFromCivicrmEventId($id) {
  $query = \Drupal::service('entity.query')->get('node');
  $result = $query->condition('type', 'event')
    ->condition(\Drupal::config('civicrm_event_sync.settings')
        ->get('field') . ".event_id", $id)
    ->execute();

  return $result;
}

/**
 * Helper function to check of an operation is to be run on a certain
 * destination
 *
 * @param $operation
 *   the operation to check. Can be any of create, update, delete.
 * @param $destination
 *   The destination of the sync. Can be any of drupal or civicrm.
 *
 * @return bool
 */
function _canRunOperationForDestination($operation, $destination) {
  return in_array($operation, \Drupal::config('civicrm_event_sync.settings')
    ->get("ops_to_{$destination}"));
}
